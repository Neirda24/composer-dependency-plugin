<?php

class Neirda24AutoloadCache
{
    /**
     * Absolute path to the vendor directory of the current project.
     *
     * @var string
     */
    protected $vendorDir;

    /**
     * Neirda24AutoloadCache constructor.
     *
     * @param string $vendorDir
     */
    public function __construct($vendorDir)
    {
        $this->vendorDir = $vendorDir;
    }

    /**
     * @param string $key
     *
     * @return string
     */
    protected function generateFileNameFromKey($key)
    {
        return $this->vendorDir . '/composer/cache_autoload_' . $key . '.php';
    }

    /**
     * @param array $array
     * @param int   $level
     *
     * @return string
     */
    protected function arrayToString(array $array, $level = 0)
    {
        $result = 'array(';

        $spacesIndent = $spacesStart = '';
        for ($i = 0; $i <= $level; $i++) {
            if ($i > 0) {
                $spacesStart .= '    ';
            }
            $spacesIndent .= '    ';
        }

        foreach ($array as $key => $value) {
            if (!is_int($key)) {
                $key = '"' . str_replace('\\', '\\\\', $key) . '"';
            }
            if (is_array($value)) {
                $stringValue = $this->arrayToString($value, ($level + 1));
            } else {
                $stringValue = '"' . str_replace('\\', '\\\\', $value) . '"';
            }

            $result .= "\n";
            $result .= sprintf('%s%s => %s,', $spacesIndent, $key, $stringValue);
        }

        $result .= "\n";
        $result .= $spacesStart . ')';

        return $result;
    }

    /**
     * Create the file
     *
     * @param string $key
     * @param array  $values
     */
    public function save($key, array $values)
    {
        $stringArray = $this->arrayToString($values);
        $stringArray = 'return ' . $stringArray . ';';

        $file = <<<EOF
<?php

// @generated by neirda24/composer-dependency-plugin

$stringArray
EOF;

        file_put_contents($this->generateFileNameFromKey($key), $file);
    }

    /**
     * @param string $key
     *
     * @return bool
     */
    public function exists($key)
    {
        return file_exists($this->generateFileNameFromKey($key));
    }
}
